name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PHP_VERSION: 8.4
  NODE_VERSION: 22

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          extensions: pdo, pdo_sqlite, sqlite3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install Node dependencies
        run: npm ci

      - name: Run Laravel Pint (PHP Code Style)
        run: ./vendor/bin/pint --test

      - name: Run ESLint (JavaScript/TypeScript)
        run: npm run lint

      - name: Run Prettier (Code Formatting)
        run: npm run format:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        php-version: [8.4]
        test-suite: [Unit, Feature]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
          coverage: xdebug
          extensions: pdo, pdo_sqlite, sqlite3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install Node dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Build frontend assets
        run: npm run build

      - name: Run ${{ matrix.test-suite }} tests
        run: ./vendor/bin/pest --testsuite=${{ matrix.test-suite }} --coverage --min=80

      - name: Upload coverage reports
        if: matrix.test-suite == 'Feature'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

  browser-tests:
    name: Browser Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          extensions: pdo, pdo_sqlite, sqlite3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install Node dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Build frontend assets
        run: npm run build

      - name: Start Chrome Driver
        run: ./vendor/bin/dusk:chrome-driver &

      - name: Run Laravel Dusk Browser Tests
        run: php artisan dusk
        env:
          APP_URL: http://127.0.0.1:8000

      - name: Upload browser test screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: browser-test-screenshots
          path: tests/Browser/screenshots

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Run security audit
        run: composer audit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, browser-tests, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          npm ci

      - name: Build production assets
        run: npm run build

      - name: Deploy to staging server
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "This would typically deploy to your staging server"
          # Add your staging deployment commands here
          # Example: rsync, ssh deployment, or cloud provider CLI

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, browser-tests, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          npm ci

      - name: Build production assets
        run: npm run build

      - name: Run production tests
        run: ./vendor/bin/pest --testsuite=Production

      - name: Deploy to production server
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "This would typically deploy to your production server"
          # Add your production deployment commands here
          # Example: Zero-downtime deployment script

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Production deployment successful!"
          # Add notification logic (Slack, Discord, email, etc.)
